#!/usr/bin/env node
'use strict';

// SPDX license IDs: https://spdx.org/licenses/

const fs = require('fs');
const path = require('path');
const { promisify } = require('util');

const _ = require('lodash');
const checker = require('license-checker');
const spdxIds = require('spdx-license-ids');
const satisfies = require('spdx-satisfies');

const OverrideHelper = require('../lib/override-helper');

const argv = require('yargs')
	.usage(
	'$0 [options] [project-path]\n\n' +
		'  If no project path is given, defaults to the current directory')
	.help('help')
	.alias('help', 'h')
	.options('config-file', {
		alias: 'c',
		default: '.licensechecker.json',
		describe: 'Path to config file. Merged with default settings unless --no-d2l is specified.'
	})
	.option('generate-template', {
		alias: 't',
		describe: 'Outputs licenses that failed the checker to standard out.'
	})
	.option('d2l', {
		boolean: true,
		default: true,
		describe: 'Use default settings specific to D2L. If disabled, allows \'acceptedLicenses\' in config file.'
	})
	.strict()
	.argv;
const projectDir = argv._[0] || process.cwd();
const configFilePath = path.resolve(path.join(projectDir, argv['config-file']));
const configAcceptedEntries = argv.d2l ?
	['manualOverrides', 'acceptedScopes', 'ignoreUnusedManualOverrides'] :
	['manualOverrides', 'acceptedScopes', 'ignoreUnusedManualOverrides', 'acceptedLicenses'];
const spdxExceptions = ['Public-Domain', 'Project-Owner'];
const specialExemptionPrefix = 'Special-Exemption';

let acceptedSpdxExpr;
let acceptedNonSpdx;
let config;
let projectPackage;
const failedLicenses = {};

function handleError(err, code) {
	console.error('ERROR: ' + err.replace(/\n/g, '\n       '));
	/* eslint no-process-exit:0 */
	process.exit(code || 1);
}

function readConfig() {
	try {
		let data = fs.readFileSync(configFilePath, {encoding: 'utf8'});
		config = JSON.parse(data);
	} catch (err) {
		console.error('No config file specified, using unmodified defaults.');
		config = {};
	}
	for (let key in config) {
		if (configAcceptedEntries.indexOf(key) < 0) {
			handleError(`${configFilePath}: "${key}" is not a valid entry (must be one of ${configAcceptedEntries}).`);
		}
	}
	if (config.manualOverrides && typeof config.manualOverrides !== 'object') {
		handleError(`${configFilePath}: "manualOverrides" must be an object (${config.manualOverrides}).`);
	}
	projectPackage = JSON.parse(fs.readFileSync(path.join(projectDir, 'package.json')));

	config.acceptedLicenses = config.acceptedLicenses || [];
	config.acceptedScopes = config.acceptedScopes || [];
	config.defaultManualOverrides = {};
	config.manualOverrides = config.manualOverrides || {};
	if (argv.d2l) {
		const d2lDefaultConfig = require(`../config/d2l-default-config.json`);
		config.acceptedLicenses = d2lDefaultConfig.acceptedLicenses;
		config.acceptedScopes = _.union(d2lDefaultConfig.acceptedScopes, config.acceptedScopes);
		config.defaultManualOverrides = d2lDefaultConfig.manualOverrides;
		config.manualOverrides = _.assign({}, d2lDefaultConfig.manualOverrides, config.manualOverrides);
		config.ignoreUnusedManualOverrides = config.ignoreUnusedManualOverrides !== undefined ?
			config.ignoreUnusedManualOverrides :
			d2lDefaultConfig.ignoreUnusedManualOverrides;
	}

	let partitions = _.partition(config.acceptedLicenses, (license) => { // eslint-disable-line consistent-return
		if (spdxIds.includes(license)) {
			return true;
		} else if (spdxExceptions.indexOf(license) >= 0) {
			return false;
		}
		handleError(`${configFilePath}: "${license}" is not a valid SPDX license ID or one of (${spdxExceptions}).`);
	});
	acceptedSpdxExpr = config.acceptedLicenses.length > 0 ? '(' + _.join(partitions[0], ' OR ') + ')' : undefined;
	acceptedNonSpdx = partitions[1].concat('Project-Owner');
}

function checkLicense(licenseString, packageString) {
	if (licenseString.length === 0) {
		return false;
	}
	/* use this code if you want to accept guessed packages
	if (licenseString[licenseString.length - 1] === '*') {
		licenseString = licenseString.substring(0, licenseString.length - 1);
	} */
	return (
		(acceptedSpdxExpr && spdxIds.includes(licenseString) && satisfies(licenseString, acceptedSpdxExpr))
		|| acceptedNonSpdx.indexOf(licenseString) >= 0
		|| packageString.startsWith(projectPackage.name + '@') // accept your own package
		|| _.some(config.acceptedScopes, (scope) => packageString.startsWith(`@${scope}/`))
		|| licenseString.startsWith(specialExemptionPrefix)
	);
}

function processLicenseCheckerOutput(json) {
	let fail = false;
	const overrideHelper = new OverrideHelper(config.manualOverrides, config.defaultManualOverrides);
	_.forEach(json, (value, key) => {
		// When the licenses are provided as an array, always use the first string
		const license = overrideHelper.find(key) ||
			(Array.isArray(value.licenses) ? value.licenses[0] : value.licenses);
		if (!checkLicense(license, key)) {
			fail = true;

			failedLicenses[key] = license;
			console.error(
				`>>> Package "${key}" doesn't meet license requirements (${license}).\n` +
				`    Repository: ${value.repository}\n` +
				`    Path: ${value.path || 'UNKNOWN'}\n`
			);
		}
	});
	if (!config.ignoreUnusedManualOverrides) {
		overrideHelper.unvisited.forEach((override) => {
			console.error(`WARNING: Manual override "${override}" is never used, consider removing it.\n`);
		});
	}

	if (fail) {
		if (argv.generateTemplate) {
			console.log(JSON.stringify({ 'manualOverrides': failedLicenses }, null, 2));
		}
		handleError(
			'Some licenses didn\'t pass the requirements (see above).\n' +
			`Please check the offending packages or update the configuration file (${argv['config-file']}).\n` +
			'You can generate a template by running this tool with --generate-template.\n' +
			'You can find more information at https://github.com/Brightspace/d2l-license-checker', 2);
	} else {
		console.error('All licenses passed the check.');
	}
}

const npmChecker = promisify(checker.init);

readConfig();

// the semantics of our arguments are different than license-checker (see their --help)
npmChecker({ start: projectDir })
	.catch(err => handleError('license-checker did not run successfully. Details:\n' + JSON.stringify(err)))
	.then(json => processLicenseCheckerOutput(json))
	.catch(err => handleError('Uncaught exception. Details:\n' + JSON.stringify(err)));
