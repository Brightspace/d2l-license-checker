#!/usr/bin/env node
'use strict';

// SPDX license IDs: https://spdx.org/licenses/

const checker = require('license-checker');
const _ = require('lodash');
const fs = require('fs');
const path = require('path');
const spdx = require('spdx');
const satisfies = require('spdx-satisfies');
const Promise = require('bluebird');

const defaultConfigFilePath = 'license-checker-ci.cfg';
const argv = require('yargs')
	.usage(
	'$0 [project-path [config-file-path]]\n\n' +
		'  If no project path is given, the current directory with be used\n' +
		`  If no config path is given, the file <project-path>/${defaultConfigFilePath} will be used as default.`)
	.help('h')
	.alias('h', 'help')
	.strict()
	.argv;
const projectDir = argv._[0] || process.cwd();
const configFilePath = path.resolve(argv._[1] || path.join(projectDir, defaultConfigFilePath));
const configAcceptedEntries = ['acceptedLicenses', 'manualOverrides', 'acceptedScopes', 'checkDev', 'checkProd', 'ignoreUnusedManualOverrides'];
const spdxExceptions = ['Public-Domain', 'Project-Owner'];
const projectPackage = JSON.parse(fs.readFileSync(path.join(projectDir, 'package.json')));

let acceptedSpdxExpr;
let acceptedNonSpdx;
let config;

function handleError(err, code) {
	console.error('ERROR: ' + err.replace(/\n/g, '\n       '));
	/* eslint no-process-exit:0 */
	process.exit(code || 1);
}

function readConfig() {
	try {
		let data = fs.readFileSync(configFilePath, {encoding: 'utf8'});
		config = JSON.parse(data);
	} catch (err) {
		handleError(`Could not read config file at ${configFilePath}: ${err}`);
	}
	for (let key in config) {
		if (configAcceptedEntries.indexOf(key) < 0) {
			handleError(`${configFilePath}: "${key}" is not a valid entry (must be one of ${configAcceptedEntries}).`);
		}
	}
	if (config.acceptedLicenses && !Array.isArray(config.acceptedLicenses)) {
		handleError(`${configFilePath}: "acceptedLicenses" must be a list (${config.acceptedLicenses}).`);
	}
	if (config.manualOverrides && typeof config.manualOverrides !== 'object') {
		handleError(`${configFilePath}: "manualOverrides" must be an object (${config.manualOverrides}).`);
	}
	config.acceptedLicenses = config.acceptedLicenses || [];
	config.acceptedScopes = config.acceptedScopes || [];
	config.manualOverrides = config.manualOverrides || {};
	config.ignoreUnusedManualOverrides = config.ignoreUnusedManualOverrides || false;
	config.checkDev = Boolean(config.checkDev); // true by default
	config.checkProd = config.checkProd === undefined ? true : config.checkProd; // false by default
	if (!config.checkDev && !config.checkProd) {
		handleError(`${configFilePath}: "checkDev" and "checkProd" can\t both be false`);
	}
	let partitions = _.partition(config.acceptedLicenses, (license) => { // eslint-disable-line consistent-return
		if (spdx.valid(license)) {
			return true;
		} else if (spdxExceptions.indexOf(license) >= 0) {
			return false;
		}
		handleError(`${configFilePath}: "${license}" is not a valid SPDX license ID or one of (${spdxExceptions}).`);
	});
	acceptedSpdxExpr = config.acceptedLicenses.length > 0 ? '(' + _.join(partitions[0], ' OR ') + ')' : undefined;
	acceptedNonSpdx = partitions[1].concat('Project-Owner');
}

function checkLicense(licenseString, packageString) {
	if (typeof licenseString !== 'string' || licenseString.length === 0) {
		return false;
	}
	/* use this code if you want to accept guessed packages
	if (licenseString[licenseString.length - 1] === '*') {
		licenseString = licenseString.substring(0, licenseString.length - 1);
	} */
	return (
		(acceptedSpdxExpr && spdx.valid(licenseString) && satisfies(licenseString, acceptedSpdxExpr))
		|| acceptedNonSpdx.indexOf(licenseString) >= 0
		|| packageString.startsWith(projectPackage.name + '@') // accept your own package
		|| _.some(config.acceptedScopes, (scope) => packageString.startsWith(`@${scope}/`))
	);
}

function processLicenseCheckerOutput(json) {
	let fail = false;
	let uncheckedManualOverrides = new Set(Object.keys(config.manualOverrides));
	_.forEach(json, (value, key) => {
		let license = value.licenses;
		if (config.manualOverrides[key]) {
			license = config.manualOverrides[key];
			uncheckedManualOverrides.delete(key);
		}
		if (!checkLicense(license, key)) {
			fail = true;
			console.error(
				`>>> Package "${key}" doesn\'t meet license requirements (${license}).\n` +
				`    Repository: ${value.repository}\n`
			);
		}
	});
	if (!config.ignoreUnusedManualOverrides) {
		uncheckedManualOverrides.forEach((override) => {
			console.error(`WARNING: Manual override "${override}" is never used, consider removing it.\n`);
		});
	}

	if (fail) {
		handleError(
			'Some licenses didn\'t pass the requirements (see above).\n' +
			`Please check the offending packages or update the configuration file (${defaultConfigFilePath}).\n` +
			'You can find more information at https://github.com/Brightspace/license-checker-ci', 2);
	} else {
		console.log('All licenses passed the check.');
	}
}

function main() {
	readConfig();
	let licenseChecker = Promise.promisify(checker.init);
	// the semantics of our arguments are different than license-checker (see their --help)
	licenseChecker({
		start: projectDir,
		production: !config.checkDev,
		development: !config.checkProd
	}).catch((err) => handleError('license-checker did not run successfully. Details:\n' + JSON.stringify(err))
	).then((json) => processLicenseCheckerOutput(json)
	).catch((err) => handleError('Uncaught exception. Details:\n' + JSON.stringify(err)));
}

main();
